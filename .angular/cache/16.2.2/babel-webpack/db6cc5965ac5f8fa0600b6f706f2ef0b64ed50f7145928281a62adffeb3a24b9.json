{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nexport let SignupComponent = class SignupComponent {\n  MustchPassword(password, confirmPassword) {\n    return formGroup => {\n      const passwordControl = formGroup.controls[password];\n      const confirmPasswordControl = formGroup.controls[confirmPassword];\n      if (confirmPasswordControl.errors && !confirmPasswordControl.errors['MustchPassword']) {\n        return;\n      }\n      if (passwordControl.value !== confirmPasswordControl.value) {\n        confirmPasswordControl.setErrors({\n          MustchPassword: true\n        });\n      } else {\n        confirmPasswordControl.setErrors(null);\n      }\n    };\n  }\n  get checkValidate() {\n    return this.formSignup.controls;\n  }\n  constructor(formBuilder, auth, router) {\n    this.formBuilder = formBuilder;\n    this.auth = auth;\n    this.router = router;\n    this.submitted = false;\n    this.formSignup = this.formBuilder.group({\n      name: new FormControl('', Validators.required),\n      email: new FormControl('', Validators.compose([Validators.required, Validators.email])),\n      password: new FormControl('', Validators.compose([Validators.required, Validators.minLength(8)])),\n      confirmPassword: new FormControl('', Validators.compose([Validators.required, Validators.minLength(8)]))\n    }, {\n      validator: this.MustchPassword('password', 'confirmPassword')\n    });\n  }\n  onhandledSubmit() {\n    this.submitted = true;\n    this.auth.signup(this.formSignup.value).subscribe(data => {\n      // this.router.navigate([''])\n    });\n  }\n};\nSignupComponent = __decorate([Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})], SignupComponent);","map":{"version":3,"names":["Component","FormControl","Validators","SignupComponent","MustchPassword","password","confirmPassword","formGroup","passwordControl","controls","confirmPasswordControl","errors","value","setErrors","checkValidate","formSignup","constructor","formBuilder","auth","router","submitted","group","name","required","email","compose","minLength","validator","onhandledSubmit","signup","subscribe","data","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Duong Danh Nam\\Desktop\\thự tập\\FontEnd\\src\\app\\pages\\signup\\signup.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { User } from 'src/app/interface/auth';\nimport { AuthService } from 'src/app/service/auth.service';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\nexport class SignupComponent {\n  user!: User\n  submitted: boolean = false\n  formSignup = this.formBuilder.group({\n    name: new FormControl('', Validators.required),\n    email: new FormControl('', Validators.compose([Validators.required, Validators.email])),\n    password: new FormControl('', Validators.compose([Validators.required, Validators.minLength(8)])),\n    confirmPassword: new FormControl('', Validators.compose([Validators.required, Validators.minLength(8)]))\n  }, { validator: this.MustchPassword('password', 'confirmPassword') })\n\n  MustchPassword(password: string, confirmPassword: string) {\n    return (formGroup: FormGroup) => {\n      const passwordControl = formGroup.controls[password];\n      const confirmPasswordControl = formGroup.controls[confirmPassword];\n      if (confirmPasswordControl.errors && !confirmPasswordControl.errors['MustchPassword']) {\n        return\n      }\n\n      if (passwordControl.value !== confirmPasswordControl.value) {\n        confirmPasswordControl.setErrors({ MustchPassword: true })\n      } else {\n        confirmPasswordControl.setErrors(null)\n      }\n    };\n  }\n  get checkValidate() {\n    return this.formSignup.controls\n  }\n\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private auth: AuthService,\n    private router: Router\n  ) { }\n\n  onhandledSubmit() {\n    this.submitted = true;\n    this.auth.signup(this.formSignup.value).subscribe((data) => {\n      // this.router.navigate([''])\n    })\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAsBC,WAAW,EAAaC,UAAU,QAAQ,gBAAgB;AAUzE,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAU1BC,cAAcA,CAACC,QAAgB,EAAEC,eAAuB;IACtD,OAAQC,SAAoB,IAAI;MAC9B,MAAMC,eAAe,GAAGD,SAAS,CAACE,QAAQ,CAACJ,QAAQ,CAAC;MACpD,MAAMK,sBAAsB,GAAGH,SAAS,CAACE,QAAQ,CAACH,eAAe,CAAC;MAClE,IAAII,sBAAsB,CAACC,MAAM,IAAI,CAACD,sBAAsB,CAACC,MAAM,CAAC,gBAAgB,CAAC,EAAE;QACrF;;MAGF,IAAIH,eAAe,CAACI,KAAK,KAAKF,sBAAsB,CAACE,KAAK,EAAE;QAC1DF,sBAAsB,CAACG,SAAS,CAAC;UAAET,cAAc,EAAE;QAAI,CAAE,CAAC;OAC3D,MAAM;QACLM,sBAAsB,CAACG,SAAS,CAAC,IAAI,CAAC;;IAE1C,CAAC;EACH;EACA,IAAIC,aAAaA,CAAA;IACf,OAAO,IAAI,CAACC,UAAU,CAACN,QAAQ;EACjC;EAGAO,YACUC,WAAwB,EACxBC,IAAiB,EACjBC,MAAc;IAFd,KAAAF,WAAW,GAAXA,WAAW;IACX,KAAAC,IAAI,GAAJA,IAAI;IACJ,KAAAC,MAAM,GAANA,MAAM;IA/BhB,KAAAC,SAAS,GAAY,KAAK;IAC1B,KAAAL,UAAU,GAAG,IAAI,CAACE,WAAW,CAACI,KAAK,CAAC;MAClCC,IAAI,EAAE,IAAIrB,WAAW,CAAC,EAAE,EAAEC,UAAU,CAACqB,QAAQ,CAAC;MAC9CC,KAAK,EAAE,IAAIvB,WAAW,CAAC,EAAE,EAAEC,UAAU,CAACuB,OAAO,CAAC,CAACvB,UAAU,CAACqB,QAAQ,EAAErB,UAAU,CAACsB,KAAK,CAAC,CAAC,CAAC;MACvFnB,QAAQ,EAAE,IAAIJ,WAAW,CAAC,EAAE,EAAEC,UAAU,CAACuB,OAAO,CAAC,CAACvB,UAAU,CAACqB,QAAQ,EAAErB,UAAU,CAACwB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACjGpB,eAAe,EAAE,IAAIL,WAAW,CAAC,EAAE,EAAEC,UAAU,CAACuB,OAAO,CAAC,CAACvB,UAAU,CAACqB,QAAQ,EAAErB,UAAU,CAACwB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;KACxG,EAAE;MAAEC,SAAS,EAAE,IAAI,CAACvB,cAAc,CAAC,UAAU,EAAE,iBAAiB;IAAC,CAAE,CAAC;EA0BjE;EAEJwB,eAAeA,CAAA;IACb,IAAI,CAACR,SAAS,GAAG,IAAI;IACrB,IAAI,CAACF,IAAI,CAACW,MAAM,CAAC,IAAI,CAACd,UAAU,CAACH,KAAK,CAAC,CAACkB,SAAS,CAAEC,IAAI,IAAI;MACzD;IAAA,CACD,CAAC;EACJ;CACD;AA1CY5B,eAAe,GAAA6B,UAAA,EAL3BhC,SAAS,CAAC;EACTiC,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,C,EACWhC,eAAe,CA0C3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}