{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductsService {\n  constructor(http) {\n    this.http = http;\n    this.API = 'http://localhost:8080/api';\n    this.token = localStorage.getItem('token');\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.token\n      })\n    };\n  }\n  getAllProducts() {\n    const url = `${this.API}/products`;\n    return this.http.get(url, this.httpOptions);\n  }\n  getProduct(_id) {\n    const url = `${this.API}/products/${_id}`;\n    return this.http.get(url, this.httpOptions);\n  }\n  addProduct(products) {\n    const url = `${this.API}/products`;\n    return this.http.post(url, products, this.httpOptions);\n  }\n  getCategory() {\n    const url = `${this.API}/category`;\n    return this.http.get(url, this.httpOptions);\n  }\n  updateProduct(products) {\n    const url = `${this.API}/products/${products._id}`;\n    return this.http.put(url, products, this.httpOptions);\n  }\n  deleteProduct(id) {\n    const url = `${this.API}/products/${id}`;\n    return this.http.delete(url, this.httpOptions);\n  }\n  getProductsByCategory(categoryName) {\n    const params = new HttpParams().set('category', categoryName);\n    return this.http.get('api/products', {\n      params\n    });\n  }\n}\n_class = ProductsService;\n_class.ɵfac = function ProductsService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","ProductsService","constructor","http","API","token","localStorage","getItem","httpOptions","headers","Authorization","getAllProducts","url","get","getProduct","_id","addProduct","products","post","getCategory","updateProduct","put","deleteProduct","id","delete","getProductsByCategory","categoryName","params","HttpParams","set","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Duong Danh Nam\\Desktop\\thự tập\\FontEnd\\src\\app\\service\\products.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n\nimport { ICategory } from '../interface/category';\nimport { IProducts } from '../interface/products';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductsService {\n\n  private API = 'http://localhost:8080/api';\n  \n\n  token = localStorage.getItem('token')\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.token,\n    }),\n  }\n\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  getAllProducts(): Observable<IProducts[]>{\n    const url = `${this.API}/products`;\n    return this.http.get<IProducts[]>(url,this.httpOptions)\n  }\n\n  getProduct(_id: string | null): Observable<IProducts> {\n    const url = `${this.API}/products/${_id}`;\n    return this.http.get<IProducts>(url,this.httpOptions)\n  }\n\n  addProduct(products: IProducts):Observable<IProducts>{\n    const url = `${this.API}/products`;\n    return this.http.post<IProducts>(url,products,this.httpOptions)\n  }\n\n  getCategory(): Observable<ICategory> {\n    const url = `${this.API}/category`;\n    return this.http.get<ICategory>(url,this.httpOptions)\n  }\n\n  updateProduct(products: IProducts): Observable<IProducts> {\n    const url = `${this.API}/products/${products._id}`;\n    return this.http.put<IProducts>(url, products,this.httpOptions);\n  }\n\n  deleteProduct(id: string | null): Observable<IProducts> {\n    const url = `${this.API}/products/${id}`;\n    return this.http.delete<IProducts>(url,this.httpOptions)\n  }\n\n  getProductsByCategory(categoryName: string): Observable<any> {\n    const params = new HttpParams().set('category', categoryName);\n    return this.http.get('api/products', { params });\n  }\n\n}\n"],"mappings":";AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAW9D,OAAM,MAAOC,eAAe;EAc1BC,YACUC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAbN,KAAAC,GAAG,GAAG,2BAA2B;IAGzC,KAAAC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACrC,KAAAC,WAAW,GAAG;MACZC,OAAO,EAAE,IAAIT,WAAW,CAAC;QACvB,cAAc,EAAE,kBAAkB;QAClCU,aAAa,EAAE,SAAS,GAAG,IAAI,CAACL;OACjC;KACF;EAKG;EAEJM,cAAcA,CAAA;IACZ,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACR,GAAG,WAAW;IAClC,OAAO,IAAI,CAACD,IAAI,CAACU,GAAG,CAAcD,GAAG,EAAC,IAAI,CAACJ,WAAW,CAAC;EACzD;EAEAM,UAAUA,CAACC,GAAkB;IAC3B,MAAMH,GAAG,GAAG,GAAG,IAAI,CAACR,GAAG,aAAaW,GAAG,EAAE;IACzC,OAAO,IAAI,CAACZ,IAAI,CAACU,GAAG,CAAYD,GAAG,EAAC,IAAI,CAACJ,WAAW,CAAC;EACvD;EAEAQ,UAAUA,CAACC,QAAmB;IAC5B,MAAML,GAAG,GAAG,GAAG,IAAI,CAACR,GAAG,WAAW;IAClC,OAAO,IAAI,CAACD,IAAI,CAACe,IAAI,CAAYN,GAAG,EAACK,QAAQ,EAAC,IAAI,CAACT,WAAW,CAAC;EACjE;EAEAW,WAAWA,CAAA;IACT,MAAMP,GAAG,GAAG,GAAG,IAAI,CAACR,GAAG,WAAW;IAClC,OAAO,IAAI,CAACD,IAAI,CAACU,GAAG,CAAYD,GAAG,EAAC,IAAI,CAACJ,WAAW,CAAC;EACvD;EAEAY,aAAaA,CAACH,QAAmB;IAC/B,MAAML,GAAG,GAAG,GAAG,IAAI,CAACR,GAAG,aAAaa,QAAQ,CAACF,GAAG,EAAE;IAClD,OAAO,IAAI,CAACZ,IAAI,CAACkB,GAAG,CAAYT,GAAG,EAAEK,QAAQ,EAAC,IAAI,CAACT,WAAW,CAAC;EACjE;EAEAc,aAAaA,CAACC,EAAiB;IAC7B,MAAMX,GAAG,GAAG,GAAG,IAAI,CAACR,GAAG,aAAamB,EAAE,EAAE;IACxC,OAAO,IAAI,CAACpB,IAAI,CAACqB,MAAM,CAAYZ,GAAG,EAAC,IAAI,CAACJ,WAAW,CAAC;EAC1D;EAEAiB,qBAAqBA,CAACC,YAAoB;IACxC,MAAMC,MAAM,GAAG,IAAIC,UAAU,EAAE,CAACC,GAAG,CAAC,UAAU,EAAEH,YAAY,CAAC;IAC7D,OAAO,IAAI,CAACvB,IAAI,CAACU,GAAG,CAAC,cAAc,EAAE;MAAEc;IAAM,CAAE,CAAC;EAClD;;SAnDW1B,eAAe;;mBAAfA,MAAe,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAfhC,MAAe;EAAAiC,OAAA,EAAfjC,MAAe,CAAAkC,IAAA;EAAAC,UAAA,EAFd;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}